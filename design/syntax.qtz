/* simple data types - must use keyword for initial declaration */
str a = "abc";
a = "foo"
a = 123 /* Error */
var a:str = "abc" /* Alternative */
var a = "abc" /* Implied type str */
var a /* Error - undefined type (use any or allow null) */
int b = 123;
int b = 123; /* Error - already declared */
delete b; /* Remove declaration */
float b = 12.3;
/* (imply delete variable before redeclare for this example file) */
any a = "abc" /* Allows all, even null */
a = 123 /* No error */
/* other bases */
bin b = 0101b;
hex b = 0x101;
/* boolean */
bool b = true;
bool b = false;
/* immutable with hash # */
str #immutableString = "immutable string";
immutableString = "wrong"
/* null allowed */
str? b = "foo"; /* foo */
b = null; /* null */
b = 123 /* error */
str? c; /* null */
str c; /* error (no value, non-null) */

/* print with newline */
print("abc")
/* print without newline */
write("abc")
/* regex same as js */

/* if */
if (a == b) {
  print(true, "`n");
}
/* Brackets not needed for if, for, while, loop, switch */
if a != b {
  print(true, "`n");
}

/* variable scope - all variables are block scoped by default */
str a = "foo" /* global */

if (condition) {
  str b = "foo"
}
b /* Error - not defined */

str? c
if (condition) {
  c = "foo"
}
print c /* foo */

str d = "foo"
if (condition) {
  str d = "bar" /* different variable due to `str` keyword */
  print d /* bar - from scoped `d` */
}
print d /* foo - from global `d` */

/* loops */
/* for number */
for (int i = 0; i < 10; i += 1) {
  if (i == 4) {
    skip;
  }
  print(i, "`n");
  str next = str(i + 1); /* Same as x:str() */
  /* Quick concat */
  print ("number #i`n") /* Default: use str(x) */
  print ("number ##i`n") /* Strict: error if not already a string */
  print ("number #next`n")
  print ("number #{next}`n")
  print ("number ##{str(i + 1)}`n")
}
/* for in */
str text = "abcdef";
for (i in text) { /* dont need int type (inferred) */
  if (i == 4 || text[i] == "e") {
    skip
  }
  print (i, text[i]) /* 0, "a" ... (index is number)*/
}
/* with `as` keyword */
for i in text as char { /* dont need int type (inferred) */
  if (i == 4 || char == "e") {
    skip
  }
  print (index, char) /* 0, "a" ... (index is number)*/
}
/* with `as` keyword, without term before `in` */
for in text as char {
  if (char == "e") {
    skip
  }
  print (index, char) /* 0, "a" ... (index is number)*/
}
/* while true */
loop {
  if (condition) {
    break
  }
}
/* while */
str string = ""
while (string.len < 10) {
  string #= "."
}

/* Throw error */
throw "What!"

/* function - immutable without `=` after name */
fun myFunction (x:int, y:int):int => {
  return x + y;
}
myFunction(1, 2); /* 3 */
/* mutable function with `=` */
fun myFunction = (x:int, y:int):int => {
  return x + y;
}

/* one line function */
fun myFunction (x:int, y:int):int => x + y;
/* Error, (unnecessary) equals `=` */
fun myFunction = (x:int, y:int):int => x + y;
/* anonymous */
(x:int, y:int):int => x + y;
/* Inline non-anonymous */
print(myFunction(x:int, y:int):int => x + y);
/* Inside object */
obj myObj = {
  myFunction: (x:int, y:int):int => x + y,
  myFunction: (x:int, y:int):int => {
    return x + y
  },
}

/* callback */
fun functionWithCallback(cb:=>int) => {
  int arg1 = 12;
  int arg2 = 40;
  print("Callback value: ", cb(arg1, arg2));
}
/* Define args */
fun functionWithCallback(cb(x:int, y:int):=>int) => {};
fun functionWithCallback(cb(:int, :int):=>int) => {};
/* :int for args and return here is redundant, already defined above, ignore */
functionWithCallback((x:int, y:int):int => {
  return x + y;
});
/* Alternative */
functionWithCallback((x:int, y:int) => x + y);
functionWithCallback((x:float[]):str => "a"); /* Error, invalid arg and return types (defined above) */
/* Inline non-anonymous */
functionWithCallback(callback(x, y) => x + y)

/* arrays */
[str] myArray = ["a", "b", "c"];
str[] myArray = ["a", "b", "c"]; /* Alternative */
var myArray:str[] = ["a", "b", "c"]; /* Alternative */
var myArray:[str] = ["a", "b", "c"]; /* Alternative */
[str]? myArray = null; /* Null optional */
[str?] myArray = ["a", null, "b"]; /* Item null optional */
[str?]? myArray = null; /* Both null optional */
[int] intArray = [1, 4, 8, -1];
[int|str] multiArray = [1, "a", 4, "b", 8, -1]; /* Int or string */
[int|str?] multiArray = [1, null, "a", 4, "b", 8, -1]; /* Item null optional */

/* index */
/* single item */
myArray[0] /* a */
myArray[-1] /* c */
/* single item as array, with alternatives */
myArray[:0] /* [a] */
myArray[0..0] /* [a] */
myArray[..0] /* [a] */
[myArray[0]] /* [a] */
myArray[-1..-1] /* [c] */
myArray[-1..] /* [c] */
[myArray[-1]] /* [c] */
/* multiple items */
myArray[..-1] /* [a, b] */
myArray[1..-1] /* [b] */
myArray[1..] /* [b, c] */
myArray[1..2] /* [b, c] */
/* everything but index */
myArray[1:] /* [a, c] */

/* deconstruction */
[int] arr = [4, 5, 6];
int [a, b, c] = arr;
print("#a, #b, #c") /* 4, 5, 6 */
print(a, ", ", b, ", ", c) /* 4, 5, 6 */

/* objects */
/* type definition for objects, same syntax as function args (ts) */
type person = {
  name: str, /* no default, throw error if not provided */
  age: int?, /* Default null */
  isAlive = true, /* Default true, type boolean inferred */
  randomValue: str|int? = 123, /* string, int or null type allowed, default 123 */
  dance :=> void,
  sayName(name: str):=> void,
}
obj myObj = { /* obj - any shape - whole must be object (redundent here, inferred - can use var) */
  a: 1,
  b: "b",
  c: (x:int, y:int):int => x + y,
};
var myObj:person; /* Error - name not defined */
var myObj:person = {name: "bruh"}; /* { age: null, isAlive: true, randomValue: 123 } - all undefined args have null option or default value */
type adult:person = { /* Extends person type */
  job:str = "unemployed",
  /* (...values from person) */
}
obj #myObj = { foo: 123 } /* Whole is immutable, items mutable */
obj myObj = { #foo: 123 } /* object can be changed, not individual item */
obj #myObj = { #foo: 123 } /* Everything immutable */
obj ##myObj = { foo: 123 } /* Same as above, *every* item is immutable (same as making every item mutable manually) */

/* Automatic value */
str foo = "hello";
any obj = { foo } /* same as {foo: "hello"} */

/* index */
myObj["a"] /* 1 */
myObj.a /* 1 */
myObj.c(1 + 2) /* 3  */

/* deconstruction */
any obj = { bar: (name:str) => print("hello, #name!"), foo: 123 }
var { bar } = obj;
bar("bruh") /* hello, bruh! */
var { foo: FOO }
print(FOO) /* 123 */

/* number */
a + b /* add */
a - b /* subtract */
a / b /* divide */
a * b /* multiply */
a % b /* mod */
a ** b /* power */

/* string */
a # b /* concat */

/* logic, bitwise (either can work?) */
a & b   /* and */
a | b   /* or */
!a      /* not */
a ^ b   /* xor */
a << b  /* left shift */
a >> b  /* right shift */
a >>> b /* unsigned right shift */

/* equality */
a == b /* equal */
a != b /* not equal */
a < b  /* less */
a > b  /* greater */
a <= b /* not less or equal */
a >= b /* not greater or equal */

/* assignment */
a = b
/* operators (a = a - b) */
a += b /* add assign */
a -= b /* subtract assign */
a *= b /* multiply assign */
a /= b /* divide assign */
a %= b /* mod assign */
a **= b /* power assign */
a #= b /* concat assign */
/* increment, decrement */
a++ /* a = a + b */
a-- /* a = a - b */

/* other (coallescing??/) */
/* `?|` OR */
print(1 ?| "none") /* 1 */
print(0 ?| "none") /* none */
/* `?&` OR */
print((1 ?& "valid") ?| "not valid") /* valid */
print((0 ?& "valid") ?| "not valid") /* not valid */
var obj = { foo: "bruh" }
print(obj[key] ?& obj[key][0] ?| "none") /* 'b' if key == "foo", else 'none' */
/* ?. if key exists */
print(obj?.foo ?| "none") /* bruh */
print(obj?.bar ?| "none") /* none */
/* ?: if property exists */
var num = 123
print(num?:str() ?| "none") /* '123' */
var num = null
print(num?:str() ?| "none") /* none */

/* ternary operator (same as js) */
print((1 == 2) ? true : false, "`n")
/* (multi line) */
print(
  (1 == 2)
    ? true
    : false,
  "`n"
);

() /* grouping */
[] /* arrays */
{} /* object, scope */
"" /* string */

/* Module syntax - similar to js */
obj #Module = { test: 123, what: "abc" };
/* Individually, multiple exports */
export Module.test /* { test: 123 } */
export Module.what /* { ..., what: "abc" } */
/* Or export all of object (must be the only export) */
export default Module /* Module */

/* Example: Import file from "./Module" (First export above) */
/* Must be in first lines????????? */
import "./Module.qtz" /* Module = { test: 123 } (get name from filename if no 'from') */
import CustomObjectName from "./Module.qtz" /* CustomObjectName = { test: 123, what: "abc" } */
import { test } from "./Module.qtz" /* test = 123 */
import { CustomName: test, what } from "./Module.qtz" /* CustomName = 123, what: "abc" */
import * from "./Module.qtz" /* test = 123, what: "abc" */

obj imported = {}
import "./Module" into imported /* Adds Module to imported - imported = { Module: { test: 123 } } */
import CustomObjectName from "./Module" into imported /* imported = { CustomObjectName: { test: 123 } } */

/* Inbuilt modules */
/* FS, Time, IO, Math */
import /* Error - empty import statement */
import * /* FS = { <FS> }, Time = { <Time> }, ... */
import FS /* FS = { <FS> } */
import fileman from FS /* fileman = { <FS> } */

/* Chain imports */
import
  fileman from FS, /* fileman = { <FS> } */
  IO, /* IO = <IO> */
  *, /* FS = { <FS> }, Time = { <Time> }, ... */
  CustomObjectName from "./Module",
  { CustomName: test } from "./Module",
; /* Trailing comma ignored with semicolon */

/* standard modules */
/* FS (rename?) */
obj ##FS = {
  File: {
    read: ():string => { ... }, /* Change to bytes? */
    write: (text:string):void => { ... },
    close: ():void => { ... },
  },

  open: (path:string):self.File => { ... },
  read: (path:string):string => {
    var file = FS.open(path)
    str text = file.read()
    file.close()
    return text
  },
  write: (path:string, text:string):void => {
    var file = FS.open(path)
    file.write(text)
    file.close()
  },
}
var file = FS.open("foo.txt")
file.read() /* content */
file.close()
FS.read("foo.txt") /* content */
/* Time */
obj ##Time = {
  now: ():int => { ... },
}
/* IO */
obj ##IO = {
  waitFor: (prompt:string):string => { ... },
}
/* Math */
obj ##Math = {
  PI: 3.14...,
  floor, ceil, round, min, max, clamp, sqrt,
  random: ():int => { ... },
  randomFloat: (min: int, max: int):int => self.random() * (max - min) + min,
  randomInt: (min: int, max: int):int => self.floor(self.randomFloat(min, max)),
  randomChoice: (value: string|[any]):any => value[self.randomInt(0, value:len)],
}
/* JSON */
obj ##JSON = {
  parse: (string:str):any => { ... },
  stringify: (obj:any):str => { ... },
}

/* default variable */
obj #$ = {
  #dir: ...,  /* Directory, excluding file */
  #path: ...,  /* Directory, including filename */
  #file: ...,  /* only filename */
  #exit: ..., /* Exit program */
  #args: ..., /* Arguments of start command */
  #version: ..., /* Quartz version */
  global: {...}, /* every global variable */
  types: {...}, /* every global type */

  #init: ..., /* (see below) */
  #update: ...,
}

/* run function on load, frame update */
$.init(main():void => {
  print("function 'main' on load")
})
fun main():void => { ... } /* Alternative */
$.init(main);
$.update(update(mod):void => {
  print("fps: ", 1 / mod)
})

/* switch case statement same as js */
switch (a) { /* Brackets optional */
  case "a":
    print("a");
    break;
  case "b":
  case "c":
    print ("a");
    break;
  case "d":
    print"d"; /* no break - fall through */
  case "e":
    print("d or e");
    break;
  default:
    print "none"
}

/* Special characters:
@ reseved (for docs?)
~ reserved (???)
` reserved other than escape string char
_ $ valid for vars
*/

/* ---------- IDEAS ----------- */

/* use immutable as default ? */

/* Promises ? similar to js */
vow MyVow(x:int):bool => {
  ..., /* Wait for something */
  resolve(x < 5)
}
bool response = await MyVow(5)

/* `with` (python)  ????? possibly unnecessary */