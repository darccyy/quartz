// simple data types
str a = "abc";
int b = 123;
float b = 12.3;
// other bases
int b = 0101;
int b = x101;
// boolean
bool b = TRUE;
bool b = FALSE;
bool b = NULL;
// immutable
str immutableString = const "immutable string";

// if
if (a == b) {
  print(TRUE, "`n");
}

// loop
loop (int i = 0; i < 10; i += 1) {
  print(i, "`n");
}

// function
fun f = (x:int, y:int):int => {
  return x + y;
}
f(1, 2); // 3

// one line function
fun f = (x:int, y:int):int => x + y;
// callback
functionWithCallback((x:int, y:int):int => {
  return x + y;
});

// array and object, similar syntax
arr<string> e = ["a", "b", "c"];
obj e = {
  a: 1,
  b: "b",
  c: (x:int, y:int):int => x + y,
}; // any type

arr[0] // a
arr[-1] // c
arr[:-1] // [a, b]
arr[1:-1] // [b]
arr[1:] // [b, c]
arr[1:2] // [b, c]

obj["a"] // 1
obj.a // 1
obj.c(1 + 2) // 3 

// number
a + b // add
a - b // subtract
a / b // divide
a * b // multiply
a % b // mod
a ^ b // power

// string
a # b // concat

// logic
a & b // and
a | b // or
!a    // not

// bitwise
a & b // and
a | b // or
!a    // not
a % b // xor
a << b // left shift
a >> b // right shift
a >>> b // unsigned right shift

// equality
a == b // equal
a != b // not equal
a < b  // less
a > b  // greater
a <= b // not less or equal
a >= b // not greater or equal

// assignment
a = 1
// standard (a = a - b)
a += 1 // add assign
a -= 1 // subtract assign
a *= 1 // multiply assign
a /= 1 // divide assign
a ^= 1 // power assign
a %= 1 // mod assign
a #= 1 // concat assign
// reverse (a = b - a)
a =+ 1 // reverse add assign
a =- 1 // reverse subtract assign
a =* 1 // reverse multiply assign
a =/ 1 // reverse divide assign
a =^ 1 // reverse power assign
a =% 1 // reverse mod assign
a =# 1 // reverse concat assign

() // grouping
[] // arrays
{} // object, code scope
"" // string

print(if (1 == 2) true else false, "`n")

// Module syntax
// Export file "Module" (only one export)
obj Module = const { test: 123 }
export Module // Module = Object { test: 123 }
export {CustomName: Module} // CustomName = Object { test: 123 }
export Module.test // test = 123
export {CustomName: Module.test} // CustomName = 123

// Import file from "./Module" (First export above)
import "./Module" // Module = Object { test: 123 }
import "./Module" as CustomName // CustomName = Object { test:123 }
import "./Module" as { test } // test = 123
import "./Module" as { CustomName: test } // CustomName = 123

obj imported = {}
import "./Module" into imported // Adds Module to imported - imported = Object { Module: { test: 123 } }